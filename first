// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EtherTransfer {
    address public owner;
    address public recipient;
    uint256 public transferAmount;

    constructor(address _recipient) {
        owner = msg.sender;
        recipient = _recipient;
        transferAmount = 50 ether; // 50 Ether (adjust as needed)
    }

    // Ensure that only the owner can initiate the transfer
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    // Function to initiate the transfer
    function initiateTransfer() external onlyOwner {
        require(address(this).balance >= transferAmount, "Contract balance is insufficient");
        payable(recipient).transfer(transferAmount);
    }

    // Function to deposit Ether into the contract (optional)
    receive() external payable {}

    // Function to check the contract's balance
    function getContractBalance() external view returns (uint256) {
        return address(this).balance;
    }
}
